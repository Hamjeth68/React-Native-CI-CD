{"version":3,"file":"DiffEditor.js","sourceRoot":"","sources":["../../../src/pageobjects/editor/DiffEditor.ts"],"names":[],"mappings":";;;;;;;;;AAAA,qCAAiD;AACjD,6CAAyC;AACzC,6CAAyC;AACzC,oCAA4D;AAC5D,mDAAwE;AAGxE;;;;GAIG;AAEH,IAAa,UAAU,GAAvB,MAAa,UAAW,SAAQ,eAAsB;IAAtD;;QACI;;WAEG;QACI,eAAU,GAAG,YAAqB,CAAA;IA6B7C,CAAC;IA3BG;;;;OAIG;IACH,iBAAiB;QACb,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAA;QAC9D,OAAO,IAAI,uBAAU,CACjB,IAAI,CAAC,UAAU,EACf,OAAO,EACP,IAAI,uBAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAClC,CAAC,IAAI,EAAE,CAAA;IACZ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB;QACnB,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAA;QAC9D,OAAO,IAAI,uBAAU,CACjB,IAAI,CAAC,UAAU,EACf,OAAO,EACP,IAAI,uBAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAClC,CAAC,IAAI,EAAE,CAAA;IACZ,CAAC;CACJ,CAAA;AAjCY,UAAU;IADtB,IAAA,uBAAe,EAAC,oBAAkB,CAAC;GACvB,UAAU,CAiCtB;AAjCY,gCAAU","sourcesContent":["import { Editor, EditorLocators } from './Editor'\nimport { TextEditor } from './TextEditor'\nimport { EditorView } from './EditorView'\nimport { PluginDecorator, IPluginDecorator } from '../utils'\nimport { DiffEditor as DiffEditorLocators } from '../../locators/1.61.0'\n\nexport interface DiffEditor extends IPluginDecorator<EditorLocators> {}\n/**\n * Page object representing a diff editor\n *\n * @category Editor\n */\n@PluginDecorator(DiffEditorLocators)\nexport class DiffEditor extends Editor<EditorLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'DiffEditor' as const\n\n    /**\n     * Gets the text editor corresponding to the originalside.\n     * (The left side of the diff editor)\n     * @returns Promise resolving to TextEditor object\n     */\n    getOriginalEditor (): Promise<TextEditor> {\n        const element = this.view.elem.$(this.locators.originalEditor)\n        return new TextEditor(\n            this.locatorMap,\n            element,\n            new EditorView(this.locatorMap)\n        ).wait()\n    }\n\n    /**\n     * Gets the text editor corresponding to the modified side.\n     * (The right side of the diff editor)\n     * @returns Promise resolving to TextEditor object\n     */\n    async getModifiedEditor (): Promise<TextEditor> {\n        const element = this.view.elem.$(this.locators.modifiedEditor)\n        return new TextEditor(\n            this.locatorMap,\n            element,\n            new EditorView(this.locatorMap)\n        ).wait()\n    }\n}\n"]}
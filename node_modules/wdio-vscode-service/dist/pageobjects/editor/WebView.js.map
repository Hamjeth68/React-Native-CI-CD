{"version":3,"file":"WebView.js","sourceRoot":"","sources":["../../../src/pageobjects/editor/WebView.ts"],"names":[],"mappings":";;;;;;;;;AAAA,qCAAiD;AACjD,oCAA4D;AAC5D,mDAAkE;AAElE,IAAI,MAA0B,CAAA;AAG9B;;;;GAIG;AAEH,IAAa,OAAO,GAApB,MAAa,OAAQ,SAAQ,eAAsB;IAAnD;;QACI;;WAEG;QACI,eAAU,GAAG,SAAkB,CAAA;IA8E1C,CAAC;IA5EG;;;;;;;OAOG;IACH,KAAK,CAAC,cAAc,CAAE,OAAe;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;IAC/B,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,eAAe,CAAE,OAAe;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAA;IAChC,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,aAAa;QACf,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,GAAG,MAAM,OAAO,CAAC,eAAe,EAAE,CAAA;SAC3C;QAED,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,gBAAgB,EAAE,CAAA;QAChD,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;YACrB,MAAM,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAA;YAE/B,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;gBACzD,MAAM,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAA;gBAC9B,OAAM;aACT;SACJ;QACD,MAAM,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;QAEpC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,OAAiB,CAAC,CAAA;QACjF,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC,YAAY,CAAC,aAAa,CAAC,CAAA;QAC9D,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,CAAC,CAAC,IAAI,UAAU,EAAE,CAAC,CAAA;QACnD,MAAM,SAAS,CAAC,YAAY,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;QAE/C,IAAI,KAAK,GAA0B,EAAE,CAAA;QACrC,MAAM,OAAO,CAAC,SAAS,CAAC,KAAK,IAAI,EAAE;YAC/B,KAAK,GAAG,MAAM,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;YAChD,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClB,OAAO,IAAI,CAAA;aACd;YACD,OAAO,KAAK,CAAA;QAChB,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;QACrB,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;QACrB,MAAM,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;QAEjC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAA;QACrC,MAAM,KAAK,CAAC,YAAY,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;QAC3C,MAAM,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;IACtC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU;QACZ,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,GAAG,MAAM,OAAO,CAAC,eAAe,EAAE,CAAA;SAC3C;QACD,OAAO,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;IACzC,CAAC;CACJ,CAAA;AAlFY,OAAO;IADnB,IAAA,uBAAe,EAAC,iBAAe,CAAC;GACpB,OAAO,CAkFnB;AAlFY,0BAAO","sourcesContent":["import { Editor, EditorLocators } from './Editor'\nimport { PluginDecorator, IPluginDecorator } from '../utils'\nimport { WebView as WebViewLocators } from '../../locators/1.61.0'\n\nlet handle: string | undefined\n\nexport interface WebView extends IPluginDecorator<EditorLocators> {}\n/**\n * Page object representing an open editor containing a web view\n *\n * @category Editor\n */\n@PluginDecorator(WebViewLocators)\nexport class WebView extends Editor<EditorLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'WebView' as const\n\n    /**\n     * Search for an element inside the webview iframe.\n     * Requires webdriver being switched to the webview iframe first.\n     * (Will attempt to search from the main DOM root otherwise)\n     *\n     * @param locator webdriver locator to search by\n     * @returns promise resolving to WebElement when found\n     */\n    async findWebElement (locator: string) {\n        return this.elem.$(locator)\n    }\n\n    /**\n     * Search for all element inside the webview iframe by a given locator\n     * Requires webdriver being switched to the webview iframe first.\n     * (Will attempt to search from the main DOM root otherwise)\n     *\n     * @param locator webdriver locator to search by\n     * @returns promise resolving to a list of WebElement objects\n     */\n    async findWebElements (locator: string) {\n        return this.elem.$$(locator)\n    }\n\n    /**\n     * Switch the underlying webdriver context to the webview iframe.\n     * This allows using the findWebElement methods.\n     * Note that only elements inside the webview iframe will be accessible.\n     * Use the switchBack method to switch to the original context.\n     */\n    async switchToFrame (): Promise<void> {\n        if (!handle) {\n            handle = await browser.getWindowHandle()\n        }\n\n        const handles = await browser.getWindowHandles()\n        for (const h of handles) {\n            await browser.switchToWindow(h)\n\n            if ((await browser.getTitle()).includes('Virtual Document')) {\n                await browser.switchToFrame(0)\n                return\n            }\n        }\n        await browser.switchToWindow(handle)\n\n        const reference = await this.elem.$(this.locatorMap.EditorView.webView as string)\n        const flowToAttr = await reference.getAttribute('aria-flowto')\n        const container = await browser.$(`#${flowToAttr}`)\n        await container.waitForExist({ timeout: 5000 })\n\n        let tries: WebdriverIO.Element[] = []\n        await browser.waitUntil(async () => {\n            tries = await container.$$(this.locators.iframe)\n            if (tries.length > 0) {\n                return true\n            }\n            return false\n        }, { timeout: 5000 })\n        const view = tries[0]\n        await browser.switchToFrame(view)\n\n        const frame = await this.activeFrame$\n        await frame.waitForExist({ timeout: 5000 })\n        await browser.switchToFrame(frame)\n    }\n\n    /**\n     * Switch the underlying webdriver back to the original window\n     */\n    async switchBack (): Promise<void> {\n        if (!handle) {\n            handle = await browser.getWindowHandle()\n        }\n        return browser.switchToWindow(handle)\n    }\n}\n"]}
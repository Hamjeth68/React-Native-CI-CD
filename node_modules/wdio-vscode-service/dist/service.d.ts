import { Services, Options } from '@wdio/types';
import { Workbench } from './pageobjects';
import type { VSCodeCapabilities } from './types';
export default class VSCodeWorkerService implements Services.ServiceInstance {
    private _capabilities;
    private _browser?;
    private _wss?;
    private _messageId;
    private _pendingMessages;
    private _promisedSocket?;
    private _proxyOptions;
    private _vscodeOptions;
    constructor(_: never, _capabilities: VSCodeCapabilities);
    private _handleIncoming;
    beforeSession(_: Options.Testrunner, capabilities: VSCodeCapabilities): Promise<void>;
    before(capabilities: VSCodeCapabilities, __: never, browser: WebdriverIO.Browser): Promise<void>;
    after(): Promise<void>;
    private _executeVSCode;
}
declare global {
    namespace WebdriverIO {
        interface Browser {
            getWorkbench: () => Promise<Workbench>;
            executeWorkbench: <T>(fn: (vscode: any, ...params: any[]) => T) => Promise<T>;
            getVSCodeVersion: () => Promise<string>;
            getVSCodeChannel: () => Promise<string>;
        }
    }
}
//# sourceMappingURL=service.d.ts.map